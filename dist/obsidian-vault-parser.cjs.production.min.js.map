{"version":3,"file":"obsidian-vault-parser.cjs.production.min.js","sources":["../src/files.ts","../src/index.ts"],"sourcesContent":["import path from \"path\";\nimport fs, { Stats } from \"fs\";\n\nexport const getFileName = (filepath: string) => {\n  const parsed = path.parse(filepath)\n\n  let name = parsed.name.toLowerCase()\n  let ext = parsed.ext.toLowerCase()\n\n  if(ext !== '.md') {\n    name = name + ext\n  }\n\n  return {\n    name,\n    ext\n  }\n}\n\n\nexport const readFile = async (\n  path: string,\n): Promise<{ contents: string; stats: Stats }> => {\n  const contents = await fs.promises.readFile(path, \"utf-8\");\n  const stats = await fs.promises.stat(path);\n  return { contents, stats };\n};\n\nexport const parseWikiLinks = (content: string): string[] => {\n  const linkRegex = /\\[\\[([a-zA-Z0-9\\s-]+\\|?[a-zA-Z0-9\\s]*)\\]\\]/g;\n  const matches = Array.from(content.matchAll(linkRegex));\n  return matches.map(m => {\n    const splits = m[1].split(\"|\");\n    return splits[0].toLowerCase();\n  });\n};\n","import glob from \"glob-promise\";\nimport matter from \"gray-matter\";\nimport { getFileName, parseWikiLinks, readFile } from \"./files\";\nimport { VaultPage, ReadVaultOptions, Vault } from \"./types\";\nimport fs from \"fs\"\nimport path from \"path\"\n\nexport * from \"./types\";\n\nconst non_md_extensions = ['svg', 'png', 'jpeg','jpg' ,'gif'];\nconst non_md_extension = new RegExp(`(${non_md_extensions.join('|')})$`);\n\nexport const connectLinks = (vault: Vault) => {\n  for (const file of Object.values(vault.files)) {\n    const links = file.content ? parseWikiLinks(file.content).filter(\n      name => vault.files[name] != null,\n    ) : []\n\n    file.links = links;\n  }\n};\n\nconst findFilesThatLinkTo = (vault: Vault, name: string): string[] => {\n  const files = Object.values(vault.files).filter(\n    f => f.name !== name && f.links.includes(name),\n  );\n\n  return files.map(f => f.name);\n};\n\nexport const connectBackLinks = (vault: Vault) => {\n  for (const file of Object.values(vault.files)) {\n    file.backLinks = findFilesThatLinkTo(vault, file.name);\n  }\n};\n\nexport const removeUnpublished = (\n  vault: Vault,\n  isPublished: (f: VaultPage) => boolean,\n) => {\n  for (const file of Object.values(vault.files)) {\n    if (!isPublished(file)) {\n      delete vault.files[file.name];\n    }\n  }\n};\n\nexport const parseFile = async (abs_file_path: string, abs_vault_path: string): Promise<VaultPage> => {\n\n  const {name, ext} = getFileName(abs_file_path);\n\n  console.log('parsed', name, ext)\n\n  const vault_relative_path = path.relative(abs_vault_path, abs_file_path);\n\n  if(abs_file_path.toLowerCase().match(non_md_extension) !== null) {\n    console.log('parsed non-md', abs_file_path)\n    const stats = await fs.promises.stat(abs_file_path);\n    return {\n      path: vault_relative_path,\n      name,\n      ext,\n      links: [],\n      backLinks: [],\n      tags: [],\n      frontMatter: {},\n      content: null,\n      createdAt: stats.birthtimeMs,\n      updatedAt: stats.mtimeMs,\n    }\n  } else {\n    console.log('parsed md', abs_file_path)\n    const { contents: rawContent, stats } = await readFile(abs_file_path);\n    const { data: frontMatter, content } = matter(rawContent);\n    return {\n      path: vault_relative_path,\n      name,\n      ext,\n      links: [],\n      backLinks: [],\n      tags: [],\n      frontMatter,\n      content,\n      createdAt: stats.birthtimeMs,\n      updatedAt: stats.mtimeMs,\n    }\n  }\n};\n\nexport const emptyVault = (path: string): Vault => ({\n  path,\n  files: {},\n  config: {},\n});\n\nexport const readVaultConfig = async (path: string): Promise<any> => {\n  try {\n    const { contents: configContents } = await readFile(\n      `${path}/.obsidian/config`,\n    );\n    return JSON.parse(configContents);\n  } catch (e) {\n    // Obsidian config not found or unparsable\n    return {};\n  }\n};\n\nexport const readVault = async (\n    vault_path: string,\n    options?: ReadVaultOptions,\n): Promise<Vault> => {\n  const abs_vault_path = path.normalize( vault_path);\n\n  const files = await glob(`${abs_vault_path}/**/*.{md,${non_md_extensions.join(',')}}`);\n\n  const vault = emptyVault(abs_vault_path);\n  vault.config = await readVaultConfig(abs_vault_path);\n\n  for (const filePath of files) {\n    const file = await parseFile(filePath, abs_vault_path);\n    vault.files[file.name] = file;\n  }\n\n  if (options?.isPublished != null) {\n    removeUnpublished(vault, options.isPublished);\n  }\n\n  connectLinks(vault);\n  connectBackLinks(vault);\n\n  return vault;\n};\n"],"names":["getFileName","filepath","parsed","path","parse","name","toLowerCase","ext","readFile","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","contents","wrap","_context","prev","next","fs","promises","sent","stat","abrupt","stats","stop","_x","apply","arguments","non_md_extensions","non_md_extension","RegExp","join","connectLinks","vault","_i","_Object$values","Object","values","files","length","file","links","content","Array","from","matchAll","map","m","split","filter","findFilesThatLinkTo","f","includes","connectBackLinks","_i2","_Object$values2","backLinks","removeUnpublished","isPublished","_i3","_Object$values3","parseFile","abs_file_path","abs_vault_path","_getFileName","vault_relative_path","_yield$readFile","_stats","_matter","console","log","relative","match","tags","frontMatter","createdAt","birthtimeMs","updatedAt","mtimeMs","matter","data","_x2","emptyVault","config","readVaultConfig","_ref2","_callee2","_context2","JSON","t0","_x3","readVault","_ref3","_callee3","vault_path","options","_iterator","_step","filePath","_context3","normalize","glob","_createForOfIteratorHelperLoose","done","value","_x4","_x5"],"mappings":"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"}