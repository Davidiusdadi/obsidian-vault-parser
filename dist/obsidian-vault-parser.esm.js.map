{"version":3,"file":"obsidian-vault-parser.esm.js","sources":["../src/files.ts","../src/index.ts"],"sourcesContent":["import path from \"path\";\nimport fs, { Stats } from \"fs\";\n\nexport const getFileName = (filepath: string) => {\n  const parsed = path.parse(filepath)\n\n  let name = parsed.name.toLowerCase()\n  let ext = parsed.ext.toLowerCase()\n\n  if(ext !== '.md') {\n    name = name + ext\n  }\n\n  return {\n    name,\n    ext\n  }\n}\n\n\nexport const readFile = async (\n  path: string,\n): Promise<{ contents: string; stats: Stats }> => {\n  const contents = await fs.promises.readFile(path, \"utf-8\");\n  const stats = await fs.promises.stat(path);\n  return { contents, stats };\n};\n\nexport const parseWikiLinks = (content: string): string[] => {\n  const linkRegex = /\\[\\[([a-zA-Z0-9\\s-]+\\|?[a-zA-Z0-9\\s]*)\\]\\]/g;\n  const matches = Array.from(content.matchAll(linkRegex));\n  return matches.map(m => {\n    const splits = m[1].split(\"|\");\n    return splits[0].toLowerCase();\n  });\n};\n","import glob from \"glob\";\nimport matter from \"gray-matter\";\nimport { getFileName, parseWikiLinks, readFile } from \"./files\";\nimport { VaultPage, ReadVaultOptions, Vault } from \"./types\";\nimport fs from \"fs\"\nimport path from \"path\"\n\nexport * from \"./types\";\n\nconst non_md_extensions = ['svg', 'png', 'jpeg','jpg' ,'gif'];\nconst non_md_extension = new RegExp(`(${non_md_extensions.join('|')})$`);\n\nexport const connectLinks = (vault: Vault) => {\n  for (const file of Object.values(vault.files)) {\n    const links = file.content ? parseWikiLinks(file.content).filter(\n      name => vault.files[name] != null,\n    ) : []\n\n    file.links = links;\n  }\n};\n\nconst findFilesThatLinkTo = (vault: Vault, name: string): string[] => {\n  const files = Object.values(vault.files).filter(\n    f => f.name !== name && f.links.includes(name),\n  );\n\n  return files.map(f => f.name);\n};\n\nexport const connectBackLinks = (vault: Vault) => {\n  for (const file of Object.values(vault.files)) {\n    file.backLinks = findFilesThatLinkTo(vault, file.name);\n  }\n};\n\nexport const removeUnpublished = (\n  vault: Vault,\n  isPublished: (f: VaultPage) => boolean,\n) => {\n  for (const file of Object.values(vault.files)) {\n    if (!isPublished(file)) {\n      delete vault.files[file.name];\n    }\n  }\n};\n\nexport const parseFile = async (abs_file_path: string, abs_vault_path: string): Promise<VaultPage> => {\n\n  const {name, ext} = getFileName(abs_file_path);\n\n  console.log('parsed', name, ext)\n\n  const vault_relative_path = path.relative(abs_vault_path, abs_file_path);\n\n  if(abs_file_path.toLowerCase().match(non_md_extension) !== null) {\n    console.log('parsed non-md', abs_file_path)\n    const stats = await fs.promises.stat(abs_file_path);\n    return {\n      path: vault_relative_path,\n      name,\n      ext,\n      links: [],\n      backLinks: [],\n      tags: [],\n      frontMatter: {},\n      content: null,\n      createdAt: stats.birthtimeMs,\n      updatedAt: stats.mtimeMs,\n    }\n  } else {\n    console.log('parsed md', abs_file_path)\n    const { contents: rawContent, stats } = await readFile(abs_file_path);\n    const { data: frontMatter, content } = matter(rawContent);\n    return {\n      path: vault_relative_path,\n      name,\n      ext,\n      links: [],\n      backLinks: [],\n      tags: [],\n      frontMatter,\n      content,\n      createdAt: stats.birthtimeMs,\n      updatedAt: stats.mtimeMs,\n    }\n  }\n};\n\nexport const emptyVault = (path: string): Vault => ({\n  path,\n  files: {},\n  config: {},\n});\n\nexport const readVaultConfig = async (path: string): Promise<any> => {\n  try {\n    const { contents: configContents } = await readFile(\n      `${path}/.obsidian/config`,\n    );\n    return JSON.parse(configContents);\n  } catch (e) {\n    // Obsidian config not found or unparsable\n    return {};\n  }\n};\n\nexport const readVault = async (\n    vault_path: string,\n    options?: ReadVaultOptions,\n): Promise<Vault> => {\n  const abs_vault_path = path.normalize( vault_path);\n\n  const files = await glob.glob(`${abs_vault_path}/**/*.{md,${non_md_extensions.join(',')}}`);\n\n  const vault = emptyVault(abs_vault_path);\n  vault.config = await readVaultConfig(abs_vault_path);\n\n  for (const filePath of files) {\n    const file = await parseFile(filePath, abs_vault_path);\n    vault.files[file.name] = file;\n  }\n\n  if (options?.isPublished != null) {\n    removeUnpublished(vault, options.isPublished);\n  }\n\n  connectLinks(vault);\n  connectBackLinks(vault);\n\n  return vault;\n};\n"],"names":["getFileName","filepath","parsed","path","parse","name","toLowerCase","ext","readFile","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","contents","stats","wrap","_callee$","_context","prev","next","fs","promises","sent","stat","abrupt","stop","_x","apply","arguments","parseWikiLinks","content","linkRegex","matches","Array","from","matchAll","map","m","splits","split","non_md_extensions","non_md_extension","RegExp","join","connectLinks","vault","_i","_Object$values","Object","values","files","length","file","links","filter","findFilesThatLinkTo","f","includes","connectBackLinks","_i2","_Object$values2","backLinks","removeUnpublished","isPublished","_i3","_Object$values3","parseFile","abs_file_path","abs_vault_path","_getFileName","vault_relative_path","_yield$readFile","rawContent","_stats","_matter","frontMatter","console","log","relative","match","tags","createdAt","birthtimeMs","updatedAt","mtimeMs","matter","data","_x2","emptyVault","config","readVaultConfig","_ref2","_callee2","_yield$readFile2","configContents","_callee2$","_context2","JSON","t0","_x3","readVault","_ref3","_callee3","vault_path","options","_iterator","_step","filePath","_callee3$","_context3","normalize","glob","_createForOfIteratorHelperLoose","done","value","_x4","_x5"],"mappings":"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"}